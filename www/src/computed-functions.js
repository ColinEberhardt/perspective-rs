// the perspective source-code has a number of these functions hard-coded into the parser. In order to make the code
// happy, this is the default set of computed functions.

const functions = {"abs":{"category":"FunctionTokenType","computed_function_name":"abs","format_function":"x => `abs(${x})`","help":"Returns the absolute value of the numeric column.","input_type":"float","label":"abs(x)","name":"abs","num_params":1,"pattern":"abs","return_type":"float","signature":"abs(x: Number): Number"},"add":{"category":"OperatorTokenType","computed_function_name":"+","format_function":"(x, y) => `(${x} + ${y})`","help":"Add together two numeric columns.","input_type":"float","label":"+","name":"add","num_params":2,"pattern":"\\+","return_type":"float","signature":"(x: Number) + (y: Number): Number"},"bin10":{"category":"FunctionTokenType","computed_function_name":"Bucket (10)","format_function":"x => `bin10(${x})`","help":"Buckets the numeric column to the nearest 10.","input_type":"float","label":"Bucket x by 10","name":"bin10","num_params":1,"pattern":"bin10","return_type":"float","signature":"bin10(x: Number): Number"},"bin100":{"category":"FunctionTokenType","computed_function_name":"Bucket (100)","format_function":"x => `bin100(${x})`","help":"Buckets the numeric column to the nearest 100.","input_type":"float","label":"Bucket x by 100","name":"bin100","num_params":1,"pattern":"bin100","return_type":"float","signature":"bin100(x: Number): Number"},"bin1000":{"category":"FunctionTokenType","computed_function_name":"Bucket (1000)","format_function":"x => `bin1000(${x})`","help":"Buckets the numeric column to the nearest 1000.","input_type":"float","label":"Bucket x by 1000","name":"bin1000","num_params":1,"pattern":"bin1000","return_type":"float","signature":"bin1000(x: Number): Number"},"bin1000th":{"category":"FunctionTokenType","computed_function_name":"Bucket (1/1000)","format_function":"x => `bin1000th(${x})`","help":"Buckets the numeric column to the nearest 0.001.","input_type":"float","label":"Bucket x by 1/1000","name":"bin1000th","num_params":1,"pattern":"bin1000th","return_type":"float","signature":"bin1000th(x: Number): Number"},"bin100th":{"category":"FunctionTokenType","computed_function_name":"Bucket (1/100)","format_function":"x => `bin100th(${x})`","help":"Buckets the numeric column to the nearest 0.01.","input_type":"float","label":"Bucket x by 1/100","name":"bin100th","num_params":1,"pattern":"bin100th","return_type":"float","signature":"bin100th(x: Number): Number"},"bin10th":{"category":"FunctionTokenType","computed_function_name":"Bucket (1/10)","format_function":"x => `bin10th(${x})`","help":"Buckets the numeric column to the nearest 0.1.","input_type":"float","label":"Bucket x by 1/10","name":"bin10th","num_params":1,"pattern":"bin10th","return_type":"float","signature":"bin10th(x: Number): Number"},"concat_comma":{"category":"FunctionTokenType","computed_function_name":"concat_comma","format_function":"x => `concat_comma(${x})`","help":"Concatenates two columns with a comma.","input_type":"string","label":"Concat(x, y) with comma","name":"concat_comma","num_params":2,"pattern":"concat_comma","return_type":"string","signature":"concat_comma(x: String, y: String): String"},"concat_space":{"category":"FunctionTokenType","computed_function_name":"concat_space","format_function":"x => `concat_space(${x})`","help":"Concatenates two columns with a space.","input_type":"string","label":"Concat(x, y) with space","name":"concat_space","num_params":2,"pattern":"concat_space","return_type":"string","signature":"concat_space(x: String, y: String): String"},"day_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (D)","format_function":"x => `day_bucket(${x})`","help":"Buckets the datetime column to the nearest day.","input_type":"datetime","label":"Bucket(x) by days","name":"day_bucket","num_params":1,"pattern":"day_bucket","return_type":"date","signature":"day_bucket(x: Datetime): Datetime"},"day_of_week":{"category":"FunctionTokenType","computed_function_name":"Day of Week","format_function":"x => `day_of_week(${x})`","help":"Returns the day of week in UTC for the datetime column.","input_type":"datetime","label":"Day of week","name":"day_of_week","num_params":1,"pattern":"day_of_week","return_type":"string","signature":"day_of_week(x: Datetime): String"},"divide":{"category":"OperatorTokenType","computed_function_name":"/","format_function":"(x, y) => `(${x} / ${y})`","help":"Divides two numeric columns.","input_type":"float","label":"/","name":"divide","num_params":2,"pattern":"\\/","return_type":"float","signature":"(x: Number) / (y: Number): Number"},"equals":{"category":"OperatorTokenType","computed_function_name":"equals","format_function":"x => `(x, y) => `(${x} == ${y})`","help":"Checks the equality of two numeric columns.","input_type":"float","label":"x == y","name":"equals","num_params":2,"pattern":"\\==","return_type":"boolean","signature":"(x: Number) == (y: Number): Boolean"},"exp":{"category":"FunctionTokenType","computed_function_name":"exp","format_function":"x => `exp(${x})`","help":"Returns the base-e exponent of the numeric column.","input_type":"float","label":"exp(x)","name":"exp","num_params":1,"pattern":"exp","return_type":"float","signature":"exp(x: Number): Number"},"greater_than":{"category":"OperatorTokenType","computed_function_name":"greater_than","format_function":"x => `(x, y) => `(${x} > ${y})`","help":"Whether the first numeric column is greater than the second numeric column.","input_type":"float","label":"x > y","name":"greater_than","num_params":2,"pattern":"\\>","return_type":"boolean","signature":"(x: Number) > (y: Number): Boolean"},"hour_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (h)","format_function":"x => `hour_bucket(${x})`","help":"Buckets the datetime column to the nearest hour.","input_type":"datetime","label":"Bucket(x) by hours","name":"hour_bucket","num_params":1,"pattern":"hour_bucket","return_type":"datetime","signature":"hour_bucket(x: Datetime): Datetime"},"hour_of_day":{"category":"FunctionTokenType","computed_function_name":"Hour of Day","format_function":"x => `hour_of_day(${x})`","help":"Returns the hour of day (0-23) in UTC for the datetime column.","input_type":"datetime","label":"Hour of day","name":"hour_of_day","num_params":1,"pattern":"hour_of_day","return_type":"integer","signature":"hour_of_day(x: Datetime): Number"},"invert":{"category":"FunctionTokenType","computed_function_name":"1/x","format_function":"x => `(1 / ${x})`","help":"Returns 1 / the numeric column.","input_type":"float","label":"1 / x","name":"invert","num_params":1,"pattern":"invert","return_type":"float","signature":"invert(x: Number): Number"},"is":{"category":"OperatorTokenType","computed_function_name":"is","format_function":"x => `(x, y) => `(${x} < ${y})`","help":"Checks equality of two string columns.","input_type":"string","label":"x is y","name":"is","num_params":2,"pattern":"is","return_type":"boolean","signature":"(x: String) is (y: String): Boolean"},"length":{"category":"FunctionTokenType","computed_function_name":"length","format_function":"x => `length(${x})`","help":"Returns the length of the string column.","input_type":"string","label":"length(x)","name":"length","num_params":1,"pattern":"length","return_type":"integer","signature":"length(x: String): Number"},"less_than":{"category":"OperatorTokenType","computed_function_name":"less_than","format_function":"x => `(x, y) => `(${x} < ${y})`","help":"Whether the first numeric column is less than the second numeric column.","input_type":"float","label":"x < y","name":"less_than","num_params":2,"pattern":"\\<","return_type":"boolean","signature":"(x: Number) < (y: Number): Boolean"},"log":{"category":"FunctionTokenType","computed_function_name":"log","format_function":"x => `log(${x})`","help":"Returns the natural log of the numeric column.","input_type":"float","label":"log(x)","name":"log","num_params":1,"pattern":"log","return_type":"float","signature":"log(x: Number): Number"},"lowercase":{"category":"FunctionTokenType","computed_function_name":"Lowercase","format_function":"x => `lowercase(${x})`","help":"Converts each string to lowercase in the column.","input_type":"string","label":"lowercase(x)","name":"lowercase","num_params":1,"pattern":"lowercase","return_type":"string","signature":"lowercase(x: String): String"},"minute_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (m)","format_function":"x => `minute_bucket(${x})`","help":"Buckets the datetime column to the nearest minute.","input_type":"datetime","label":"Bucket(x) by minutes","name":"minute_bucket","num_params":1,"pattern":"minute_bucket","return_type":"datetime","signature":"minute_bucket(x: Datetime): Datetime"},"month_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (M)","format_function":"x => `month_bucket(${x})`","help":"Buckets the datetime column to the nearest month.","input_type":"datetime","label":"Bucket(x) by months","name":"month_bucket","num_params":1,"pattern":"month_bucket","return_type":"date","signature":"month_bucket(x: Datetime): Datetime"},"month_of_year":{"category":"FunctionTokenType","computed_function_name":"Month of Year","format_function":"x => `month_of_year(${x})`","help":"Returns the month of year in UTC for the datetime column.","input_type":"datetime","label":"Month of year","name":"month_of_year","num_params":1,"pattern":"month_of_year","return_type":"string","signature":"month_of_year(x: Datetime): String"},"multiply":{"category":"OperatorTokenType","computed_function_name":"*","format_function":"(x, y) => `(${x} * ${y})`","help":"Multiplies two numeric columns.","input_type":"float","label":"*","name":"multiply","num_params":2,"pattern":"\\*","return_type":"float","signature":"(x: Number) * (y: Number): Number"},"not_equals":{"category":"OperatorTokenType","computed_function_name":"not_equals","format_function":"x => `(x, y) => `(${x} != ${y})`","help":"Whether two numeric columns are not equal.","input_type":"float","label":"x != y","name":"not_equals","num_params":2,"pattern":"\\!=","return_type":"boolean","signature":"(x: Number) != (y: Number): Boolean"},"percent_of":{"category":"OperatorTokenType","computed_function_name":"%","format_function":"x => `(x, y) => `(${x} % ${y})`","help":"Returns the first column as a percent of the second column.","input_type":"float","label":"x % y","name":"percent_of","num_params":2,"pattern":"\\%","return_type":"float","signature":"(x: Number) % (y: Number): Number"},"pow":{"category":"OperatorTokenType","computed_function_name":"pow","format_function":"x => `(${x} ^ ${y})`","help":"Raises the first column to the power of the second column.","input_type":"float","label":"x ^ y","name":"pow","num_params":2,"pattern":"\\^","return_type":"float","signature":"(x: Number) ^ (y: Number): Number"},"pow2":{"category":"FunctionTokenType","computed_function_name":"x^2","format_function":"x => `(${x} ^ 2)`","help":"Returns the numeric column to the power of 2.","input_type":"float","label":"x ^ 2","name":"pow2","num_params":1,"pattern":"pow2","return_type":"float","signature":"pow2(x: Number): Number"},"second_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (s)","format_function":"x => `second_bucket(${x})`","help":"Buckets the datetime column to the nearest second.","input_type":"datetime","label":"Bucket(x) by seconds","name":"second_bucket","num_params":1,"pattern":"second_bucket","return_type":"datetime","signature":"second_bucket(x: Datetime): Datetime"},"sqrt":{"category":"FunctionTokenType","computed_function_name":"sqrt","format_function":"x => `sqrt(${x})`","help":"Returns the square root of the numeric column.","input_type":"float","label":"sqrt(x)","name":"sqrt","num_params":1,"pattern":"sqrt","return_type":"float","signature":"sqrt(x: Number): Number"},"subtract":{"category":"OperatorTokenType","computed_function_name":"-","format_function":"(x, y) => `(${x} - ${y})`","help":"Subtract two numeric columns.","input_type":"float","label":"-","name":"subtract","num_params":2,"pattern":"\\-","return_type":"float","signature":"(x: Number) - (y: Number): Number"},"uppercase":{"category":"FunctionTokenType","computed_function_name":"Uppercase","format_function":"x => `uppercase(${x})`","help":"Converts each string to uppercase in the column.","input_type":"string","label":"uppercase(x)","name":"uppercase","num_params":1,"pattern":"uppercase","return_type":"string","signature":"uppercase(x: String): String"},"week_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (W)","format_function":"x => `week_bucket(${x})`","help":"Buckets the datetime column to the nearest week.","input_type":"datetime","label":"Bucket(x) by weeks","name":"week_bucket","num_params":1,"pattern":"week_bucket","return_type":"date","signature":"week_bucket(x: Datetime): Datetime"},"year_bucket":{"category":"FunctionTokenType","computed_function_name":"Bucket (Y)","format_function":"x => `year_bucket(${x})`","help":"Buckets the datetime column to the nearest year.","input_type":"datetime","label":"Bucket(x) by years","name":"year_bucket","num_params":1,"pattern":"year_bucket","return_type":"date","signature":"year_bucket(x: Datetime): Datetime"}};

export default functions;